class AwdCli < Formula
  desc "Agentic Workflow Definitions (AWD): The NPM for AI-Native Development"
  homepage "https://github.com/danielmeppiel/awd-cli"
  version "{{VERSION}}"
  license "MIT"

  if Hardware::CPU.arm? && OS.mac?
    url "https://github.com/danielmeppiel/awd-cli/releases/download/v#{version}/awd-darwin-arm64.tar.gz"
    sha256 "{{DARWIN_ARM64_SHA}}"
  elsif Hardware::CPU.intel? && OS.mac?
    url "https://github.com/danielmeppiel/awd-cli/releases/download/v#{version}/awd-darwin-x86_64.tar.gz"
    sha256 "{{DARWIN_X86_64_SHA}}"
  elsif OS.linux? && Hardware::CPU.intel?
    url "https://github.com/danielmeppiel/awd-cli/releases/download/v#{version}/awd-linux-x86_64.tar.gz"
    sha256 "{{LINUX_X86_64_SHA}}"
  end

  def install
    # Install the entire directory structure since the binary depends on _internal for dependencies
    libexec.install Dir["*"]
    
    # On macOS, handle code signing issues properly
    if OS.mac?
      # Remove quarantine attributes that might interfere (ignore failures)
      system "xattr", "-cr", libexec.to_s
      
      # Find and re-sign Python framework with ad-hoc signature to fix bundle format issues
      python_framework = libexec/"_internal/Python.framework/Python"
      if python_framework.exist?
        # Re-sign with ad-hoc signature to resolve bundle format ambiguity
        system "codesign", "--force", "--sign", "-", python_framework.to_s
      end
    end
    
    bin.write_exec_script libexec/"awd"
  end

  test do
    system "#{bin}/awd", "--version"
  end
end